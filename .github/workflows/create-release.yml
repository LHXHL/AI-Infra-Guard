name: 🚀 Create Release

on:
  push:
    tags:
      - v*

env:
  RELEASE_NAME: AI-Infra-Guard

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Extract tag message
        id: tag-message
        run: |
          # 获取标签信息
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # 获取标签消息
          TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          
          # 如果标签消息为空，使用默认消息
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release $TAG_NAME"
          fi
          
          # 将消息保存到文件，处理多行内容
          echo "$TAG_MESSAGE" > tag_message.txt
          echo "tag_message_file=tag_message.txt" >> $GITHUB_OUTPUT

      - name: 📦 Prepare release package
        run: |
          # 创建发布目录
          mkdir -p release-package
          # 复制必要文件
          cp docker-compose.images.yml release-package/docker-compose.yml
          cp -r data release-package/data
          mkdir -p release-package/db
          mkdir -p release-package/log
          mkdir -p release-package/uploads
          
          # 获取版本号并修改 docker-compose.images.yml
          VERSION="${{ steps.tag-message.outputs.tag_name }}"
          # 移除版本号前的 'v' 前缀（如果存在）
          VERSION_NO_V=${VERSION#v}
          
          # 替换 docker-compose.images.yml 中的 latest 标签为当前版本号
          sed -i "s/:latest/:${VERSION_NO_V}/g" release-package/docker-compose.yml
          

      - name: 📦 Create release archive
        run: |
          # 创建压缩包
          cd release-package
          tar -czf ../AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.tar.gz .
          cd ..
          
          # 创建 ZIP 包（Windows 用户友好）
          cd release-package
          zip -r ../AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.zip .
          cd ..

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }} ${{ steps.tag-message.outputs.tag_name }}
          body_path: ${{ steps.tag-message.outputs.tag_message_file }}
          draft: false
          prerelease: false
          files: |
            AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.tar.gz
            AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "🎉 Release created successfully!"
          echo "📦 Release: ${{ env.RELEASE_NAME }} ${{ steps.tag-message.outputs.tag_name }}"
          echo "📁 Assets:"
          echo "   - AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.tar.gz"
          echo "   - AI-Infra-Guard-${{ steps.tag-message.outputs.tag_name }}.zip"
          echo "🔗 Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.tag-message.outputs.tag_name }}"
